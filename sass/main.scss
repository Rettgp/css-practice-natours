$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;
$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit /* box-sizing is not default inherited */
}

html {
    /* 
        Root font sizes are set in the html selector.
        For accessibility don't set absolute pixel sizes. It overrides user specified values.
        User-agent is 16px, but we want 10px so setting a percentage gets that AND preserves user specified values
    */
    font-size: 62.5%;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    line-height: 1.7;
    color: $color-grey-dark;
    padding: 3rem;

    box-sizing: border-box
}

.header {
    height: 95vh;
    background-image: linear-gradient(
        to right bottom, 
        rgba($color-primary-light, 0.8), 
        rgba($color-primary-dark, 0.8)), 
        url(../img/hero.jpg);
    background-size: cover; /* Scales to be the smallest size possible preserving aspect ratio */
    background-position: top; /* Ensures that the top of the background is always at the top */
    position: relative; /* Sets the origin to which children elements position themselves*/
    clip-path: polygon(0 0, 100% 0, 100% 75%, 0% 100%);

    &__logo-box {
        position: absolute;
        top: 4rem;
        left: 4rem;
    }

    &__logo {
        height: 3.5rem;
    }

    &__text-box {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%); /* Transform for centering */
        text-align: center;
    }
}

.heading-primary {
    color: $color-white;
    text-transform: uppercase;

    /* Supposedly fixes shakiness of animations at the end */
    backface-visibility: hidden;
    margin-bottom: 6rem;

    &--main {
        display: block;
        font-size: 6rem;
        font-weight: 400;
        letter-spacing: 3.5rem;

        animation: moveInLeft 1s ease-in;

        /* 
        Delay animation
        animation-delay: 1s;

        Repeating an animation
        animation-iteration-count: 3;
        */
    }

    &--sub {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.75rem;

        animation: moveInRight 1s ease-out;
    }
}

.btn {
    /*The :link,:visited are pseudo classes specifically for anchor elements*/
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        display: inline-block;
        border-radius: 10rem;
        transition: all .2s; /* Must be on initial state */
        position: relative;
        font-size: 1.6rem
    }
    &:hover {
        transform: translateY(-3px);
        box-shadow: 0 1rem 2rem rgba($color-black,0.2);
        &::after {
            transform: scaleX(1.25) scaleY(1.3);
            opacity: 0;
        }
    }
    &:active {
        transform: translateY(-1px);
        box-shadow: 0 .5rem 1rem rgba($color-black,0.2);
    }
    &::after {
        content: "";
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition: all .4s;
    }

    &--white {
        background-color: $color-white;
        color: $color-grey-dark;

        &::after {
            background-color: $color-white;
        }
    }

    &--animated {
        animation: moveInUp 1s ease-out .75s;
        animation-fill-mode: backwards;
    }
}


/*
opacity and transform are the only 
properties we should animate since they
are optimized in browsers
*/
@keyframes moveInLeft{
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0); /* Returns to original transform */
    }
}

@keyframes moveInRight{
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0); /* Returns to original transform */
    }
}

@keyframes moveInUp{
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        transform: translate(0); /* Returns to original transform */
    }
}